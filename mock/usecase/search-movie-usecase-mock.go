// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ariefrpm/movies/usecase (interfaces: SearchMovieUseCase)

// Package usecase_mock is a generated GoMock package.
package usecase_mock

import (
	reflect "reflect"

	entity "github.com/ariefrpm/movies/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockSearchMovieUseCase is a mock of SearchMovieUseCase interface.
type MockSearchMovieUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchMovieUseCaseMockRecorder
}

// MockSearchMovieUseCaseMockRecorder is the mock recorder for MockSearchMovieUseCase.
type MockSearchMovieUseCaseMockRecorder struct {
	mock *MockSearchMovieUseCase
}

// NewMockSearchMovieUseCase creates a new mock instance.
func NewMockSearchMovieUseCase(ctrl *gomock.Controller) *MockSearchMovieUseCase {
	mock := &MockSearchMovieUseCase{ctrl: ctrl}
	mock.recorder = &MockSearchMovieUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchMovieUseCase) EXPECT() *MockSearchMovieUseCaseMockRecorder {
	return m.recorder
}

// SearchMovie mocks base method.
func (m *MockSearchMovieUseCase) SearchMovie(arg0 int, arg1 string) (*entity.MovieList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovie", arg0, arg1)
	ret0, _ := ret[0].(*entity.MovieList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovie indicates an expected call of SearchMovie.
func (mr *MockSearchMovieUseCaseMockRecorder) SearchMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovie", reflect.TypeOf((*MockSearchMovieUseCase)(nil).SearchMovie), arg0, arg1)
}
