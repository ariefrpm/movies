// Code generated by MockGen. DO NOT EDIT.
// Source: proto/search-movie.pb.go

// Package controller_mock is a generated GoMock package.
package controller_mock

import (
	context "context"
	reflect "reflect"

	proto "github.com/ariefrpm/movies/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSearchMovieServiceClient is a mock of SearchMovieServiceClient interface.
type MockSearchMovieServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSearchMovieServiceClientMockRecorder
}

// MockSearchMovieServiceClientMockRecorder is the mock recorder for MockSearchMovieServiceClient.
type MockSearchMovieServiceClientMockRecorder struct {
	mock *MockSearchMovieServiceClient
}

// NewMockSearchMovieServiceClient creates a new mock instance.
func NewMockSearchMovieServiceClient(ctrl *gomock.Controller) *MockSearchMovieServiceClient {
	mock := &MockSearchMovieServiceClient{ctrl: ctrl}
	mock.recorder = &MockSearchMovieServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchMovieServiceClient) EXPECT() *MockSearchMovieServiceClientMockRecorder {
	return m.recorder
}

// SearchMovie mocks base method.
func (m *MockSearchMovieServiceClient) SearchMovie(ctx context.Context, in *proto.SearchMovieRequest, opts ...grpc.CallOption) (*proto.SearchMovieResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchMovie", varargs...)
	ret0, _ := ret[0].(*proto.SearchMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovie indicates an expected call of SearchMovie.
func (mr *MockSearchMovieServiceClientMockRecorder) SearchMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovie", reflect.TypeOf((*MockSearchMovieServiceClient)(nil).SearchMovie), varargs...)
}

// MockSearchMovieServiceServer is a mock of SearchMovieServiceServer interface.
type MockSearchMovieServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSearchMovieServiceServerMockRecorder
}

// MockSearchMovieServiceServerMockRecorder is the mock recorder for MockSearchMovieServiceServer.
type MockSearchMovieServiceServerMockRecorder struct {
	mock *MockSearchMovieServiceServer
}

// NewMockSearchMovieServiceServer creates a new mock instance.
func NewMockSearchMovieServiceServer(ctrl *gomock.Controller) *MockSearchMovieServiceServer {
	mock := &MockSearchMovieServiceServer{ctrl: ctrl}
	mock.recorder = &MockSearchMovieServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchMovieServiceServer) EXPECT() *MockSearchMovieServiceServerMockRecorder {
	return m.recorder
}

// SearchMovie mocks base method.
func (m *MockSearchMovieServiceServer) SearchMovie(arg0 context.Context, arg1 *proto.SearchMovieRequest) (*proto.SearchMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovie", arg0, arg1)
	ret0, _ := ret[0].(*proto.SearchMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovie indicates an expected call of SearchMovie.
func (mr *MockSearchMovieServiceServerMockRecorder) SearchMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovie", reflect.TypeOf((*MockSearchMovieServiceServer)(nil).SearchMovie), arg0, arg1)
}
